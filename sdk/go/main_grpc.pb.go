// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package _go

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExampleClient is the client API for Example service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExampleClient interface {
	GetStream1(ctx context.Context, opts ...grpc.CallOption) (Example_GetStream1Client, error)
	ReturnStream1(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Example_ReturnStream1Client, error)
	BothStream1(ctx context.Context, opts ...grpc.CallOption) (Example_BothStream1Client, error)
	GetStream2(ctx context.Context, opts ...grpc.CallOption) (Example_GetStream2Client, error)
	ReturnStream2(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Example_ReturnStream2Client, error)
	BothStream2(ctx context.Context, opts ...grpc.CallOption) (Example_BothStream2Client, error)
	GetStream3(ctx context.Context, opts ...grpc.CallOption) (Example_GetStream3Client, error)
	ReturnStream3(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Example_ReturnStream3Client, error)
	BothStream3(ctx context.Context, opts ...grpc.CallOption) (Example_BothStream3Client, error)
}

type exampleClient struct {
	cc grpc.ClientConnInterface
}

func NewExampleClient(cc grpc.ClientConnInterface) ExampleClient {
	return &exampleClient{cc}
}

func (c *exampleClient) GetStream1(ctx context.Context, opts ...grpc.CallOption) (Example_GetStream1Client, error) {
	stream, err := c.cc.NewStream(ctx, &Example_ServiceDesc.Streams[0], "/streams.Example/GetStream1", opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleGetStream1Client{stream}
	return x, nil
}

type Example_GetStream1Client interface {
	Send(*SimpleMsg1) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type exampleGetStream1Client struct {
	grpc.ClientStream
}

func (x *exampleGetStream1Client) Send(m *SimpleMsg1) error {
	return x.ClientStream.SendMsg(m)
}

func (x *exampleGetStream1Client) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exampleClient) ReturnStream1(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Example_ReturnStream1Client, error) {
	stream, err := c.cc.NewStream(ctx, &Example_ServiceDesc.Streams[1], "/streams.Example/ReturnStream1", opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleReturnStream1Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Example_ReturnStream1Client interface {
	Recv() (*SimpleMsg1, error)
	grpc.ClientStream
}

type exampleReturnStream1Client struct {
	grpc.ClientStream
}

func (x *exampleReturnStream1Client) Recv() (*SimpleMsg1, error) {
	m := new(SimpleMsg1)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exampleClient) BothStream1(ctx context.Context, opts ...grpc.CallOption) (Example_BothStream1Client, error) {
	stream, err := c.cc.NewStream(ctx, &Example_ServiceDesc.Streams[2], "/streams.Example/BothStream1", opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleBothStream1Client{stream}
	return x, nil
}

type Example_BothStream1Client interface {
	Send(*SimpleMsg1) error
	Recv() (*SimpleMsg1, error)
	grpc.ClientStream
}

type exampleBothStream1Client struct {
	grpc.ClientStream
}

func (x *exampleBothStream1Client) Send(m *SimpleMsg1) error {
	return x.ClientStream.SendMsg(m)
}

func (x *exampleBothStream1Client) Recv() (*SimpleMsg1, error) {
	m := new(SimpleMsg1)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exampleClient) GetStream2(ctx context.Context, opts ...grpc.CallOption) (Example_GetStream2Client, error) {
	stream, err := c.cc.NewStream(ctx, &Example_ServiceDesc.Streams[3], "/streams.Example/GetStream2", opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleGetStream2Client{stream}
	return x, nil
}

type Example_GetStream2Client interface {
	Send(*SimpleMsg2) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type exampleGetStream2Client struct {
	grpc.ClientStream
}

func (x *exampleGetStream2Client) Send(m *SimpleMsg2) error {
	return x.ClientStream.SendMsg(m)
}

func (x *exampleGetStream2Client) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exampleClient) ReturnStream2(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Example_ReturnStream2Client, error) {
	stream, err := c.cc.NewStream(ctx, &Example_ServiceDesc.Streams[4], "/streams.Example/ReturnStream2", opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleReturnStream2Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Example_ReturnStream2Client interface {
	Recv() (*SimpleMsg2, error)
	grpc.ClientStream
}

type exampleReturnStream2Client struct {
	grpc.ClientStream
}

func (x *exampleReturnStream2Client) Recv() (*SimpleMsg2, error) {
	m := new(SimpleMsg2)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exampleClient) BothStream2(ctx context.Context, opts ...grpc.CallOption) (Example_BothStream2Client, error) {
	stream, err := c.cc.NewStream(ctx, &Example_ServiceDesc.Streams[5], "/streams.Example/BothStream2", opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleBothStream2Client{stream}
	return x, nil
}

type Example_BothStream2Client interface {
	Send(*SimpleMsg2) error
	Recv() (*SimpleMsg2, error)
	grpc.ClientStream
}

type exampleBothStream2Client struct {
	grpc.ClientStream
}

func (x *exampleBothStream2Client) Send(m *SimpleMsg2) error {
	return x.ClientStream.SendMsg(m)
}

func (x *exampleBothStream2Client) Recv() (*SimpleMsg2, error) {
	m := new(SimpleMsg2)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exampleClient) GetStream3(ctx context.Context, opts ...grpc.CallOption) (Example_GetStream3Client, error) {
	stream, err := c.cc.NewStream(ctx, &Example_ServiceDesc.Streams[6], "/streams.Example/GetStream3", opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleGetStream3Client{stream}
	return x, nil
}

type Example_GetStream3Client interface {
	Send(*SimpleMsg3) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type exampleGetStream3Client struct {
	grpc.ClientStream
}

func (x *exampleGetStream3Client) Send(m *SimpleMsg3) error {
	return x.ClientStream.SendMsg(m)
}

func (x *exampleGetStream3Client) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exampleClient) ReturnStream3(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Example_ReturnStream3Client, error) {
	stream, err := c.cc.NewStream(ctx, &Example_ServiceDesc.Streams[7], "/streams.Example/ReturnStream3", opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleReturnStream3Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Example_ReturnStream3Client interface {
	Recv() (*SimpleMsg3, error)
	grpc.ClientStream
}

type exampleReturnStream3Client struct {
	grpc.ClientStream
}

func (x *exampleReturnStream3Client) Recv() (*SimpleMsg3, error) {
	m := new(SimpleMsg3)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *exampleClient) BothStream3(ctx context.Context, opts ...grpc.CallOption) (Example_BothStream3Client, error) {
	stream, err := c.cc.NewStream(ctx, &Example_ServiceDesc.Streams[8], "/streams.Example/BothStream3", opts...)
	if err != nil {
		return nil, err
	}
	x := &exampleBothStream3Client{stream}
	return x, nil
}

type Example_BothStream3Client interface {
	Send(*SimpleMsg3) error
	Recv() (*SimpleMsg3, error)
	grpc.ClientStream
}

type exampleBothStream3Client struct {
	grpc.ClientStream
}

func (x *exampleBothStream3Client) Send(m *SimpleMsg3) error {
	return x.ClientStream.SendMsg(m)
}

func (x *exampleBothStream3Client) Recv() (*SimpleMsg3, error) {
	m := new(SimpleMsg3)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExampleServer is the server API for Example service.
// All implementations must embed UnimplementedExampleServer
// for forward compatibility
type ExampleServer interface {
	GetStream1(Example_GetStream1Server) error
	ReturnStream1(*emptypb.Empty, Example_ReturnStream1Server) error
	BothStream1(Example_BothStream1Server) error
	GetStream2(Example_GetStream2Server) error
	ReturnStream2(*emptypb.Empty, Example_ReturnStream2Server) error
	BothStream2(Example_BothStream2Server) error
	GetStream3(Example_GetStream3Server) error
	ReturnStream3(*emptypb.Empty, Example_ReturnStream3Server) error
	BothStream3(Example_BothStream3Server) error
	mustEmbedUnimplementedExampleServer()
}

// UnimplementedExampleServer must be embedded to have forward compatible implementations.
type UnimplementedExampleServer struct {
}

func (UnimplementedExampleServer) GetStream1(Example_GetStream1Server) error {
	return status.Errorf(codes.Unimplemented, "method GetStream1 not implemented")
}
func (UnimplementedExampleServer) ReturnStream1(*emptypb.Empty, Example_ReturnStream1Server) error {
	return status.Errorf(codes.Unimplemented, "method ReturnStream1 not implemented")
}
func (UnimplementedExampleServer) BothStream1(Example_BothStream1Server) error {
	return status.Errorf(codes.Unimplemented, "method BothStream1 not implemented")
}
func (UnimplementedExampleServer) GetStream2(Example_GetStream2Server) error {
	return status.Errorf(codes.Unimplemented, "method GetStream2 not implemented")
}
func (UnimplementedExampleServer) ReturnStream2(*emptypb.Empty, Example_ReturnStream2Server) error {
	return status.Errorf(codes.Unimplemented, "method ReturnStream2 not implemented")
}
func (UnimplementedExampleServer) BothStream2(Example_BothStream2Server) error {
	return status.Errorf(codes.Unimplemented, "method BothStream2 not implemented")
}
func (UnimplementedExampleServer) GetStream3(Example_GetStream3Server) error {
	return status.Errorf(codes.Unimplemented, "method GetStream3 not implemented")
}
func (UnimplementedExampleServer) ReturnStream3(*emptypb.Empty, Example_ReturnStream3Server) error {
	return status.Errorf(codes.Unimplemented, "method ReturnStream3 not implemented")
}
func (UnimplementedExampleServer) BothStream3(Example_BothStream3Server) error {
	return status.Errorf(codes.Unimplemented, "method BothStream3 not implemented")
}
func (UnimplementedExampleServer) mustEmbedUnimplementedExampleServer() {}

// UnsafeExampleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExampleServer will
// result in compilation errors.
type UnsafeExampleServer interface {
	mustEmbedUnimplementedExampleServer()
}

func RegisterExampleServer(s grpc.ServiceRegistrar, srv ExampleServer) {
	s.RegisterService(&Example_ServiceDesc, srv)
}

func _Example_GetStream1_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExampleServer).GetStream1(&exampleGetStream1Server{stream})
}

type Example_GetStream1Server interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*SimpleMsg1, error)
	grpc.ServerStream
}

type exampleGetStream1Server struct {
	grpc.ServerStream
}

func (x *exampleGetStream1Server) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *exampleGetStream1Server) Recv() (*SimpleMsg1, error) {
	m := new(SimpleMsg1)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Example_ReturnStream1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExampleServer).ReturnStream1(m, &exampleReturnStream1Server{stream})
}

type Example_ReturnStream1Server interface {
	Send(*SimpleMsg1) error
	grpc.ServerStream
}

type exampleReturnStream1Server struct {
	grpc.ServerStream
}

func (x *exampleReturnStream1Server) Send(m *SimpleMsg1) error {
	return x.ServerStream.SendMsg(m)
}

func _Example_BothStream1_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExampleServer).BothStream1(&exampleBothStream1Server{stream})
}

type Example_BothStream1Server interface {
	Send(*SimpleMsg1) error
	Recv() (*SimpleMsg1, error)
	grpc.ServerStream
}

type exampleBothStream1Server struct {
	grpc.ServerStream
}

func (x *exampleBothStream1Server) Send(m *SimpleMsg1) error {
	return x.ServerStream.SendMsg(m)
}

func (x *exampleBothStream1Server) Recv() (*SimpleMsg1, error) {
	m := new(SimpleMsg1)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Example_GetStream2_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExampleServer).GetStream2(&exampleGetStream2Server{stream})
}

type Example_GetStream2Server interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*SimpleMsg2, error)
	grpc.ServerStream
}

type exampleGetStream2Server struct {
	grpc.ServerStream
}

func (x *exampleGetStream2Server) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *exampleGetStream2Server) Recv() (*SimpleMsg2, error) {
	m := new(SimpleMsg2)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Example_ReturnStream2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExampleServer).ReturnStream2(m, &exampleReturnStream2Server{stream})
}

type Example_ReturnStream2Server interface {
	Send(*SimpleMsg2) error
	grpc.ServerStream
}

type exampleReturnStream2Server struct {
	grpc.ServerStream
}

func (x *exampleReturnStream2Server) Send(m *SimpleMsg2) error {
	return x.ServerStream.SendMsg(m)
}

func _Example_BothStream2_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExampleServer).BothStream2(&exampleBothStream2Server{stream})
}

type Example_BothStream2Server interface {
	Send(*SimpleMsg2) error
	Recv() (*SimpleMsg2, error)
	grpc.ServerStream
}

type exampleBothStream2Server struct {
	grpc.ServerStream
}

func (x *exampleBothStream2Server) Send(m *SimpleMsg2) error {
	return x.ServerStream.SendMsg(m)
}

func (x *exampleBothStream2Server) Recv() (*SimpleMsg2, error) {
	m := new(SimpleMsg2)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Example_GetStream3_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExampleServer).GetStream3(&exampleGetStream3Server{stream})
}

type Example_GetStream3Server interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*SimpleMsg3, error)
	grpc.ServerStream
}

type exampleGetStream3Server struct {
	grpc.ServerStream
}

func (x *exampleGetStream3Server) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *exampleGetStream3Server) Recv() (*SimpleMsg3, error) {
	m := new(SimpleMsg3)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Example_ReturnStream3_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ExampleServer).ReturnStream3(m, &exampleReturnStream3Server{stream})
}

type Example_ReturnStream3Server interface {
	Send(*SimpleMsg3) error
	grpc.ServerStream
}

type exampleReturnStream3Server struct {
	grpc.ServerStream
}

func (x *exampleReturnStream3Server) Send(m *SimpleMsg3) error {
	return x.ServerStream.SendMsg(m)
}

func _Example_BothStream3_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExampleServer).BothStream3(&exampleBothStream3Server{stream})
}

type Example_BothStream3Server interface {
	Send(*SimpleMsg3) error
	Recv() (*SimpleMsg3, error)
	grpc.ServerStream
}

type exampleBothStream3Server struct {
	grpc.ServerStream
}

func (x *exampleBothStream3Server) Send(m *SimpleMsg3) error {
	return x.ServerStream.SendMsg(m)
}

func (x *exampleBothStream3Server) Recv() (*SimpleMsg3, error) {
	m := new(SimpleMsg3)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Example_ServiceDesc is the grpc.ServiceDesc for Example service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Example_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "streams.Example",
	HandlerType: (*ExampleServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStream1",
			Handler:       _Example_GetStream1_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReturnStream1",
			Handler:       _Example_ReturnStream1_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BothStream1",
			Handler:       _Example_BothStream1_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetStream2",
			Handler:       _Example_GetStream2_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReturnStream2",
			Handler:       _Example_ReturnStream2_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BothStream2",
			Handler:       _Example_BothStream2_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetStream3",
			Handler:       _Example_GetStream3_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ReturnStream3",
			Handler:       _Example_ReturnStream3_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BothStream3",
			Handler:       _Example_BothStream3_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "main.proto",
}
