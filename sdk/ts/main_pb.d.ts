/* eslint-disable */
/*Proudly generated by GenDocu.com*/
// package: streams
// file: main.proto

import * as jspb from "google-protobuf";
import * as google_protobuf_empty_pb from "google-protobuf/google/protobuf/empty_pb";

export class SimpleMsg1 extends jspb.Message {
  getNumber(): number;
  setNumber(value: number): void;

  getS(): string;
  setS(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SimpleMsg1.AsObject;
  static toObject(includeInstance: boolean, msg: SimpleMsg1): SimpleMsg1.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SimpleMsg1, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SimpleMsg1;
  static deserializeBinaryFromReader(message: SimpleMsg1, reader: jspb.BinaryReader): SimpleMsg1;
}

export namespace SimpleMsg1 {
  export type AsObject = {
    number: number,
    s: string,
  }
}

export class SimpleMsg2 extends jspb.Message {
  clearNumberList(): void;
  getNumberList(): Array<number>;
  setNumberList(value: Array<number>): void;
  addNumber(value: number, index?: number): number;

  clearSList(): void;
  getSList(): Array<string>;
  setSList(value: Array<string>): void;
  addS(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SimpleMsg2.AsObject;
  static toObject(includeInstance: boolean, msg: SimpleMsg2): SimpleMsg2.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SimpleMsg2, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SimpleMsg2;
  static deserializeBinaryFromReader(message: SimpleMsg2, reader: jspb.BinaryReader): SimpleMsg2;
}

export namespace SimpleMsg2 {
  export type AsObject = {
    numberList: Array<number>,
    sList: Array<string>,
  }
}

export class SimpleMsg3 extends jspb.Message {
  clearNumberList(): void;
  getNumberList(): Array<SimpleMsg2>;
  setNumberList(value: Array<SimpleMsg2>): void;
  addNumber(value?: SimpleMsg2, index?: number): SimpleMsg2;

  clearSList(): void;
  getSList(): Array<SimpleMsg2>;
  setSList(value: Array<SimpleMsg2>): void;
  addS(value?: SimpleMsg2, index?: number): SimpleMsg2;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): SimpleMsg3.AsObject;
  static toObject(includeInstance: boolean, msg: SimpleMsg3): SimpleMsg3.AsObject;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: SimpleMsg3, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): SimpleMsg3;
  static deserializeBinaryFromReader(message: SimpleMsg3, reader: jspb.BinaryReader): SimpleMsg3;
}

export namespace SimpleMsg3 {
  export type AsObject = {
    numberList: Array<SimpleMsg2.AsObject>,
    sList: Array<SimpleMsg2.AsObject>,
  }
}

