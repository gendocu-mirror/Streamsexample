/* eslint-disable */
/*Proudly generated by GenDocu.com*/
// package: streams
// file: main.proto

import * as main_pb from "./main_pb";
import * as google_protobuf_empty_pb from "google-protobuf/google/protobuf/empty_pb";
import {grpc} from "@improbable-eng/grpc-web";

type ExampleGetStream1 = {
  readonly methodName: string;
  readonly service: typeof Example;
  readonly requestStream: true;
  readonly responseStream: false;
  readonly requestType: typeof main_pb.SimpleMsg1;
  readonly responseType: typeof google_protobuf_empty_pb.Empty;
};

type ExampleReturnStream1 = {
  readonly methodName: string;
  readonly service: typeof Example;
  readonly requestStream: false;
  readonly responseStream: true;
  readonly requestType: typeof google_protobuf_empty_pb.Empty;
  readonly responseType: typeof main_pb.SimpleMsg1;
};

type ExampleBothStream1 = {
  readonly methodName: string;
  readonly service: typeof Example;
  readonly requestStream: true;
  readonly responseStream: true;
  readonly requestType: typeof main_pb.SimpleMsg1;
  readonly responseType: typeof main_pb.SimpleMsg1;
};

type ExampleGetStream2 = {
  readonly methodName: string;
  readonly service: typeof Example;
  readonly requestStream: true;
  readonly responseStream: false;
  readonly requestType: typeof main_pb.SimpleMsg2;
  readonly responseType: typeof google_protobuf_empty_pb.Empty;
};

type ExampleReturnStream2 = {
  readonly methodName: string;
  readonly service: typeof Example;
  readonly requestStream: false;
  readonly responseStream: true;
  readonly requestType: typeof google_protobuf_empty_pb.Empty;
  readonly responseType: typeof main_pb.SimpleMsg2;
};

type ExampleBothStream2 = {
  readonly methodName: string;
  readonly service: typeof Example;
  readonly requestStream: true;
  readonly responseStream: true;
  readonly requestType: typeof main_pb.SimpleMsg2;
  readonly responseType: typeof main_pb.SimpleMsg2;
};

type ExampleGetStream3 = {
  readonly methodName: string;
  readonly service: typeof Example;
  readonly requestStream: true;
  readonly responseStream: false;
  readonly requestType: typeof main_pb.SimpleMsg3;
  readonly responseType: typeof google_protobuf_empty_pb.Empty;
};

type ExampleReturnStream3 = {
  readonly methodName: string;
  readonly service: typeof Example;
  readonly requestStream: false;
  readonly responseStream: true;
  readonly requestType: typeof google_protobuf_empty_pb.Empty;
  readonly responseType: typeof main_pb.SimpleMsg3;
};

type ExampleBothStream3 = {
  readonly methodName: string;
  readonly service: typeof Example;
  readonly requestStream: true;
  readonly responseStream: true;
  readonly requestType: typeof main_pb.SimpleMsg3;
  readonly responseType: typeof main_pb.SimpleMsg3;
};

export class Example {
  static readonly serviceName: string;
  static readonly GetStream1: ExampleGetStream1;
  static readonly ReturnStream1: ExampleReturnStream1;
  static readonly BothStream1: ExampleBothStream1;
  static readonly GetStream2: ExampleGetStream2;
  static readonly ReturnStream2: ExampleReturnStream2;
  static readonly BothStream2: ExampleBothStream2;
  static readonly GetStream3: ExampleGetStream3;
  static readonly ReturnStream3: ExampleReturnStream3;
  static readonly BothStream3: ExampleBothStream3;
}

export type ServiceError = { message: string, code: number; metadata: grpc.Metadata }
export type Status = { details: string, code: number; metadata: grpc.Metadata }

interface UnaryResponse {
  cancel(): void;
}
interface ResponseStream<T> {
  cancel(): void;
  on(type: 'data', handler: (message: T) => void): ResponseStream<T>;
  on(type: 'end', handler: (status?: Status) => void): ResponseStream<T>;
  on(type: 'status', handler: (status: Status) => void): ResponseStream<T>;
}
interface RequestStream<T> {
  write(message: T): RequestStream<T>;
  end(): void;
  cancel(): void;
  on(type: 'end', handler: (status?: Status) => void): RequestStream<T>;
  on(type: 'status', handler: (status: Status) => void): RequestStream<T>;
}
interface BidirectionalStream<ReqT, ResT> {
  write(message: ReqT): BidirectionalStream<ReqT, ResT>;
  end(): void;
  cancel(): void;
  on(type: 'data', handler: (message: ResT) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'end', handler: (status?: Status) => void): BidirectionalStream<ReqT, ResT>;
  on(type: 'status', handler: (status: Status) => void): BidirectionalStream<ReqT, ResT>;
}

export class ExampleClient {
  readonly serviceHost: string;

  constructor(serviceHost: string, options?: grpc.RpcOptions);
  getStream1(metadata?: grpc.Metadata): RequestStream<main_pb.SimpleMsg1>;
  returnStream1(requestMessage: google_protobuf_empty_pb.Empty, metadata?: grpc.Metadata): ResponseStream<main_pb.SimpleMsg1>;
  bothStream1(metadata?: grpc.Metadata): BidirectionalStream<main_pb.SimpleMsg1, main_pb.SimpleMsg1>;
  getStream2(metadata?: grpc.Metadata): RequestStream<main_pb.SimpleMsg2>;
  returnStream2(requestMessage: google_protobuf_empty_pb.Empty, metadata?: grpc.Metadata): ResponseStream<main_pb.SimpleMsg2>;
  bothStream2(metadata?: grpc.Metadata): BidirectionalStream<main_pb.SimpleMsg2, main_pb.SimpleMsg2>;
  getStream3(metadata?: grpc.Metadata): RequestStream<main_pb.SimpleMsg3>;
  returnStream3(requestMessage: google_protobuf_empty_pb.Empty, metadata?: grpc.Metadata): ResponseStream<main_pb.SimpleMsg3>;
  bothStream3(metadata?: grpc.Metadata): BidirectionalStream<main_pb.SimpleMsg3, main_pb.SimpleMsg3>;
}

